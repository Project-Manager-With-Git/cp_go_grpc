// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.17.1
// source: echo.proto

package echo_pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message float64 `protobuf:"fixed64,1,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_echo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_echo_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMessage() float64 {
	if x != nil {
		return x.Message
	}
	return 0
}

var File_echo_proto protoreflect.FileDescriptor

var file_echo_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x65, 0x63,
	0x68, 0x6f, 0x22, 0x23, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xc9, 0x01, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f,
	0x12, 0x28, 0x0a, 0x06, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x0d, 0x2e, 0x65, 0x63, 0x68,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0b, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x0d, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x53,
	0x75, 0x6d, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x0d, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x37, 0x0a, 0x11, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12,
	0x0d, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d,
	0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_echo_proto_rawDescOnce sync.Once
	file_echo_proto_rawDescData = file_echo_proto_rawDesc
)

func file_echo_proto_rawDescGZIP() []byte {
	file_echo_proto_rawDescOnce.Do(func() {
		file_echo_proto_rawDescData = protoimpl.X.CompressGZIP(file_echo_proto_rawDescData)
	})
	return file_echo_proto_rawDescData
}

var file_echo_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_echo_proto_goTypes = []interface{}{
	(*Message)(nil), // 0: echo.Message
}
var file_echo_proto_depIdxs = []int32{
	0, // 0: echo.ECHO.Square:input_type -> echo.Message
	0, // 1: echo.ECHO.RangeSquare:input_type -> echo.Message
	0, // 2: echo.ECHO.SumSquare:input_type -> echo.Message
	0, // 3: echo.ECHO.StreamrangeSquare:input_type -> echo.Message
	0, // 4: echo.ECHO.Square:output_type -> echo.Message
	0, // 5: echo.ECHO.RangeSquare:output_type -> echo.Message
	0, // 6: echo.ECHO.SumSquare:output_type -> echo.Message
	0, // 7: echo.ECHO.StreamrangeSquare:output_type -> echo.Message
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_echo_proto_init() }
func file_echo_proto_init() {
	if File_echo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_echo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_echo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_echo_proto_goTypes,
		DependencyIndexes: file_echo_proto_depIdxs,
		MessageInfos:      file_echo_proto_msgTypes,
	}.Build()
	File_echo_proto = out.File
	file_echo_proto_rawDesc = nil
	file_echo_proto_goTypes = nil
	file_echo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ECHOClient is the client API for ECHO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ECHOClient interface {
	Square(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	RangeSquare(ctx context.Context, in *Message, opts ...grpc.CallOption) (ECHO_RangeSquareClient, error)
	SumSquare(ctx context.Context, opts ...grpc.CallOption) (ECHO_SumSquareClient, error)
	StreamrangeSquare(ctx context.Context, opts ...grpc.CallOption) (ECHO_StreamrangeSquareClient, error)
}

type eCHOClient struct {
	cc grpc.ClientConnInterface
}

func NewECHOClient(cc grpc.ClientConnInterface) ECHOClient {
	return &eCHOClient{cc}
}

func (c *eCHOClient) Square(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/echo.ECHO/Square", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCHOClient) RangeSquare(ctx context.Context, in *Message, opts ...grpc.CallOption) (ECHO_RangeSquareClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ECHO_serviceDesc.Streams[0], "/echo.ECHO/RangeSquare", opts...)
	if err != nil {
		return nil, err
	}
	x := &eCHORangeSquareClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ECHO_RangeSquareClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type eCHORangeSquareClient struct {
	grpc.ClientStream
}

func (x *eCHORangeSquareClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eCHOClient) SumSquare(ctx context.Context, opts ...grpc.CallOption) (ECHO_SumSquareClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ECHO_serviceDesc.Streams[1], "/echo.ECHO/SumSquare", opts...)
	if err != nil {
		return nil, err
	}
	x := &eCHOSumSquareClient{stream}
	return x, nil
}

type ECHO_SumSquareClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type eCHOSumSquareClient struct {
	grpc.ClientStream
}

func (x *eCHOSumSquareClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eCHOSumSquareClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eCHOClient) StreamrangeSquare(ctx context.Context, opts ...grpc.CallOption) (ECHO_StreamrangeSquareClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ECHO_serviceDesc.Streams[2], "/echo.ECHO/StreamrangeSquare", opts...)
	if err != nil {
		return nil, err
	}
	x := &eCHOStreamrangeSquareClient{stream}
	return x, nil
}

type ECHO_StreamrangeSquareClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type eCHOStreamrangeSquareClient struct {
	grpc.ClientStream
}

func (x *eCHOStreamrangeSquareClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eCHOStreamrangeSquareClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ECHOServer is the server API for ECHO service.
type ECHOServer interface {
	Square(context.Context, *Message) (*Message, error)
	RangeSquare(*Message, ECHO_RangeSquareServer) error
	SumSquare(ECHO_SumSquareServer) error
	StreamrangeSquare(ECHO_StreamrangeSquareServer) error
}

// UnimplementedECHOServer can be embedded to have forward compatible implementations.
type UnimplementedECHOServer struct {
}

func (*UnimplementedECHOServer) Square(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}
func (*UnimplementedECHOServer) RangeSquare(*Message, ECHO_RangeSquareServer) error {
	return status.Errorf(codes.Unimplemented, "method RangeSquare not implemented")
}
func (*UnimplementedECHOServer) SumSquare(ECHO_SumSquareServer) error {
	return status.Errorf(codes.Unimplemented, "method SumSquare not implemented")
}
func (*UnimplementedECHOServer) StreamrangeSquare(ECHO_StreamrangeSquareServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamrangeSquare not implemented")
}

func RegisterECHOServer(s *grpc.Server, srv ECHOServer) {
	s.RegisterService(&_ECHO_serviceDesc, srv)
}

func _ECHO_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ECHOServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.ECHO/Square",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ECHOServer).Square(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ECHO_RangeSquare_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ECHOServer).RangeSquare(m, &eCHORangeSquareServer{stream})
}

type ECHO_RangeSquareServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type eCHORangeSquareServer struct {
	grpc.ServerStream
}

func (x *eCHORangeSquareServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ECHO_SumSquare_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ECHOServer).SumSquare(&eCHOSumSquareServer{stream})
}

type ECHO_SumSquareServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type eCHOSumSquareServer struct {
	grpc.ServerStream
}

func (x *eCHOSumSquareServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eCHOSumSquareServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ECHO_StreamrangeSquare_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ECHOServer).StreamrangeSquare(&eCHOStreamrangeSquareServer{stream})
}

type ECHO_StreamrangeSquareServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type eCHOStreamrangeSquareServer struct {
	grpc.ServerStream
}

func (x *eCHOStreamrangeSquareServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eCHOStreamrangeSquareServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ECHO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.ECHO",
	HandlerType: (*ECHOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Square",
			Handler:    _ECHO_Square_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RangeSquare",
			Handler:       _ECHO_RangeSquare_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SumSquare",
			Handler:       _ECHO_SumSquare_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamrangeSquare",
			Handler:       _ECHO_StreamrangeSquare_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "echo.proto",
}
