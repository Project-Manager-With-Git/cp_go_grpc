package main

import (
	"os"

	sdk "{{ app_name }}/{{ serv_name }}_sdk"
	serv "{{ app_name }}/{{ serv_name }}_serv"

	log "github.com/Golang-Tools/loggerhelper/v2"
	s "github.com/Golang-Tools/schema-entry-go/v2"
)

func main() {
	root, err := s.NewEntryPoint(s.WithName("{{ app_name }}"), s.WithUsage("{{ app_name }} serv|test [options] "))
	if err != nil {
		log.Error("init root node err", log.Dict{"err": err.Error()})
		os.Exit(2)
	}
	serv, err := s.NewEndPoint(&serv.Server{
		//UnaryInterceptors:  []grpc.UnaryServerInterceptor{interceptor.UnaryTimerInterceptor},
		//StreamInterceptors: []grpc.StreamServerInterceptor{interceptor.StreamTimerInterceptor},
	}, s.WithName("serv"), s.WithUsage("{{ app_name }} serv [options]"))
	if err != nil {
		log.Error("create serv node get error", log.Dict{"err": err.Error()})
		os.Exit(2)
	}
	test, err := s.NewEndPoint(&sdk.Config{
		//Query_Addresses: []string{"localhost:5000"},
		//UnaryInterceptors:  []grpc.UnaryClientInterceptor{interceptor.UnaryTimerInterceptor},
		//StreamInterceptors: []grpc.StreamClientInterceptor{interceptor.StreamTimerInterceptor},
	}, s.WithName("test"), s.WithUsage("{{ app_name }} test [options]"))
	if err != nil {
		log.Error("create test node get error", log.Dict{"err": err.Error()})
		os.Exit(2)
	}
	serv.SetParent(root)
	test.SetParent(root)
	root.Parse(os.Args)
}
